@inject IDiscordService DiscordService

@if (!_loading && _channelMessages != null)
{
    @foreach(var message in _channelMessages.Messages.Take(Limit))
    {
        <ChannelMessage Message="message"/>
    }
}
else
{
    <BSCol Column="12">
        <BSProgress>
            <BSProgressBar IsStriped="true" Max="100" Color="BSColor.Dark" Value="100" IsAnimated="true"></BSProgressBar>
        </BSProgress>
    </BSCol>
}
@code {
    [Parameter]
    public string ChannelId { get; set; }
    [Parameter]
    public int Limit { get; set; }
    private ChannelMessagesViewModel _channelMessages { get; set; }
    private bool _loading { get; set; } = true;
    private string _headerName { get; set; } = "ChannelName";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _channelMessages = await DiscordService.GetChannelMessagesAsync(ChannelId);
            _loading = false;
            StateHasChanged();
        }
    }
}