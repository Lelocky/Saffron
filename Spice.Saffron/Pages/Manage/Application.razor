@page "/manage/application"
@using System.Diagnostics
@using System.Reflection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IDiscordService DiscordService
@attribute [Authorize(Policy = "ManagementOnly")]

<PageTitle>Manage Application</PageTitle>
<div class=page-header>
    <h2>Manage Application</h2>
</div>

<BSAccordion>
    <BSAccordionItem DefaultShown="false" AlwaysOpen="false">
        <Header>Roles</Header>
        <Content>
            @if (_serverRolesViewModel != null)
            {
                <h4>Server Roles</h4>
                <div class="server-roles-details-overview">
                    <ul>
                        @foreach (var roles in _serverRolesViewModel.Roles)
                        {
                            <li>@roles.Name</li>
                        }
                    </ul>
                </div>
                <div class="server-roles-cache-management">
                    <ul>
                        <li>Retrieved from cache: @_serverRolesViewModel.RetrievedFromCache</li>
                        <li>Cached at: @_serverRolesViewModel.CachedAt</li>
                    </ul>
                    <BSButton Color="BSColor.Dark" OnClick="OnClearServerRolesCache">Clear cache</BSButton>
                </div>
            }
            else
            {
                <BSProgress>
                    <BSProgressBar IsStriped="true" Max="100" Color="BSColor.Dark" Value="100" IsAnimated="true"></BSProgressBar>
                </BSProgress>
            }
        </Content>
    </BSAccordionItem>
    <BSAccordionItem DefaultShown="false" AlwaysOpen="false">
        <Header>App Info</Header>
        <Content>
            <ul>
                <li>Version: @_productVersion</li>
            </ul>
        </Content>
    </BSAccordionItem>
</BSAccordion>

@code {
    private string _productVersion;
    private ServerRolesViewModel _serverRolesViewModel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _serverRolesViewModel = await DiscordService.GetServerRolesAsync();
             _productVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).ProductVersion;
            StateHasChanged();
        }
    }

    private async Task OnClearServerRolesCache()
    {

    }
}

